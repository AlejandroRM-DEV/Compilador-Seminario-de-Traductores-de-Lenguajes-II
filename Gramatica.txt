
expresion_primaria
	: IDENTIFIER
	| CONSTANT
	| STRING_LITERAL
	| '(' expresion ')'
	;

expresion_posfija
	: expresion_primaria
	| expresion_posfija '[' expresion ']'
	| expresion_posfija '(' ')'
	| expresion_posfija '(' lista_expresiones_argumento ')'
	| expresion_posfija '.' IDENTIFIER
	| expresion_posfija PTR_OP IDENTIFIER
	| expresion_posfija INC_OP
	| expresion_posfija DEC_OP
	;

lista_expresiones_argumento
	: expresion_de_asignacion
	| lista_expresiones_argumento ',' expresion_de_asignacion
	;

expresion_unaria
	: expresion_posfija
	| INC_OP expresion_unaria
	| DEC_OP expresion_unaria
	| operador_unario expresion_cast
	| SIZEOF expresion_unaria
	| SIZEOF '(' nombre_de_tipo ')'
	;

operador_unario
	: '&'
	| '*'
	| '+'
	| '-'
	| '~'
	| '!'
	;

expresion_cast
	: expresion_unaria
	| '(' nombre_de_tipo ')' expresion_cast
	;

expresion_multiplicativa
	: expresion_cast
	| expresion_multiplicativa '*' expresion_cast
	| expresion_multiplicativa '/' expresion_cast
	| expresion_multiplicativa '%' expresion_cast
	;

expresion_aditiva
	: expresion_multiplicativa
	| expresion_aditiva '+' expresion_multiplicativa
	| expresion_aditiva '-' expresion_multiplicativa
	;

expresion_de_corrimiento
	: expresion_aditiva
	| expresion_de_corrimiento LEFT_OP expresion_aditiva
	| expresion_de_corrimiento RIGHT_OP expresion_aditiva
	;

expresion_relacional
	: expresion_de_corrimiento
	| expresion_relacional '<' expresion_de_corrimiento
	| expresion_relacional '>' expresion_de_corrimiento
	| expresion_relacional LE_OP expresion_de_corrimiento
	| expresion_relacional GE_OP expresion_de_corrimiento
	;

expresion_de_igualdad
	: expresion_relacional
	| expresion_de_igualdad EQ_OP expresion_relacional
	| expresion_de_igualdad NE_OP expresion_relacional
	;

expresion_AND
	: expresion_de_igualdad
	| expresion_AND '&' expresion_de_igualdad
	;

expresion_OR_exclusivo
	: expresion_AND
	| expresion_OR_exclusivo '^' expresion_AND
	;

expresion_OR_inclusivo
	: expresion_OR_exclusivo
	| expresion_OR_inclusivo '|' expresion_OR_exclusivo
	;

expresion_logica_AND
	: expresion_OR_inclusivo
	| expresion_logica_AND AND_OP expresion_OR_inclusivo
	;

expresion_logica_OR
	: expresion_logica_AND
	| expresion_logica_OR OR_OP expresion_logica_AND
	;

expresion_condicional
	: expresion_logica_OR
	| expresion_logica_OR '?' expresion ':' expresion_condicional
	;

expresion_de_asignacion
	: expresion_condicional
	| expresion_unaria operador_de_asignacion expresion_de_asignacion
	;

operador_de_asignacion
	: '='
	| MUL_ASSIGN
	| DIV_ASSIGN
	| MOD_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN
	| LEFT_ASSIGN
	| RIGHT_ASSIGN
	| AND_ASSIGN
	| XOR_ASSIGN
	| OR_ASSIGN
	;

expresion
	: expresion_de_asignacion
	| expresion ',' expresion_de_asignacion
	;

expresion_constante
	: expresion_condicional
	;

declaracion
	: especificadores_de_declaracion ';'
	| especificadores_de_declaracion lista_declaradores_init ';'
	;

especificadores_de_declaracion
	: especificador_categoria_almacenamiento
	| especificador_categoria_almacenamiento especificadores_de_declaracion
	| especificador_de_tipo
	| especificador_de_tipo especificadores_de_declaracion
	| calificador_de_tipo
	| calificador_de_tipo especificadores_de_declaracion
	;

lista_declaradores_init
	: declarador_init
	| lista_declaradores_init ',' declarador_init
	;

declarador_init
	: declarator
	| declarator '=' inicializador
	;

especificador_categoria_almacenamiento
	: TYPEDEF
	| EXTERN
	| STATIC
	| AUTO
	| REGISTER
	;

especificador_de_tipo
	: VOID
	| CHAR
	| SHORT
	| INT
	| LONG
	| FLOAT
	| DOUBLE
	| SIGNED
	| UNSIGNED
	| especificador_estructura_o_union
	| especificador_enum
	| nombre_de_tipo
	;

especificador_estructura_o_union
	: estructura_o_union IDENTIFIER '{' lista_declaraciones_struct '}'
	| estructura_o_union '{' lista_declaraciones_struct '}'
	| estructura_o_union IDENTIFIER
	;

estructura_o_union
	: STRUCT
	| UNION
	;

lista_declaraciones_struct
	: declaracion_struct
	| lista_declaraciones_struct declaracion_struct
	;

declaracion_struct
	: lista_calificador_especificador lista_declaradores_struct ';'
	;

lista_calificador_especificador
	: especificador_de_tipo lista_calificador_especificador
	| especificador_de_tipo
	| calificador_de_tipo lista_calificador_especificador
	| calificador_de_tipo
	;

lista_declaradores_struct
	: declarador_struct
	| lista_declaradores_struct ',' declarador_struct
	;

declarador_struct
	: declarator
	| ':' expresion_constante
	| declarator ':' expresion_constante
	;

especificador_enum
	: ENUM '{' lista_de_enumerador '}'
	| ENUM IDENTIFIER '{' lista_de_enumerador '}'
	| ENUM IDENTIFIER
	;

lista_de_enumerador
	: enumerador
	| lista_de_enumerador ',' enumerador
	;

enumerador
	: IDENTIFIER
	| IDENTIFIER '=' expresion_constante
	;

calificador_de_tipo
	: CONST
	| VOLATILE
	;

declarator
	: apuntador declarador_directo
	| declarador_directo
	;

declarador_directo
	: IDENTIFIER
	| '(' declarator ')'
	| declarador_directo '[' expresion_constante ']'
	| declarador_directo '[' ']'
	| declarador_directo '(' lista_tipos_de_parametros ')'
	| declarador_directo '(' lista_de_identificadores ')'
	| declarador_directo '(' ')'
	;

apuntador
	: '*'
	| '*' lista_calificadores_de_tipo
	| '*' apuntador
	| '*' lista_calificadores_de_tipo apuntador
	;

lista_calificadores_de_tipo
	: calificador_de_tipo
	| lista_calificadores_de_tipo calificador_de_tipo
	;


lista_tipos_de_parametros
	: lista_de_parametros
	| lista_de_parametros ',' ELLIPSIS
	;

lista_de_parametros
	: declaracion_parametro
	| lista_de_parametros ',' declaracion_parametro
	;

declaracion_parametro
	: especificadores_de_declaracion declarator
	| especificadores_de_declaracion declarador_abstracto
	| especificadores_de_declaracion
	;

lista_de_identificadores
	: IDENTIFIER
	| lista_de_identificadores ',' IDENTIFIER
	;

nombre_de_tipo
	: lista_calificador_especificador
	| lista_calificador_especificador declarador_abstracto
	;

declarador_abstracto
	: apuntador
	| declarador_abstracto_directo
	| apuntador declarador_abstracto_directo
	;

declarador_abstracto_directo
	: '(' declarador_abstracto ')'
	| '[' ']'
	| '[' expresion_constante ']'
	| declarador_abstracto_directo '[' ']'
	| declarador_abstracto_directo '[' expresion_constante ']'
	| '(' ')'
	| '(' lista_tipos_de_parametros ')'
	| declarador_abstracto_directo '(' ')'
	| declarador_abstracto_directo '(' lista_tipos_de_parametros ')'
	;

inicializador
	: expresion_de_asignacion
	| '{' lista_de_inicializadores '}'
	| '{' lista_de_inicializadores ',' '}'
	;

lista_de_inicializadores
	: inicializador
	| lista_de_inicializadores ',' inicializador
	;

proposicion
	: proposicion_etiquetada
	| proposicion_compuesta
	| proposicion_expresion
	| proposicion_de_seleccion
	| proposicion_de_iteracion
	| proposicion_de_salto
	;

proposicion_etiquetada
	: IDENTIFIER ':' proposicion
	| CASE expresion_constante ':' proposicion
	| DEFAULT ':' proposicion
	;

proposicion_compuesta
	: '{' '}'
	| '{' lista_de_proposiciones '}'
	| '{' lista_de_declaraciones '}'
	| '{' lista_de_declaraciones lista_de_proposiciones '}'
	;

lista_de_declaraciones
	: declaracion
	| lista_de_declaraciones declaracion
	;

lista_de_proposiciones
	: proposicion
	| lista_de_proposiciones proposicion
	;

proposicion_expresion
	: ';'
	| expresion ';'
	;

proposicion_de_seleccion
	: IF '(' expresion ')' proposicion
	| IF '(' expresion ')' proposicion ELSE proposicion
	| SWITCH '(' expresion ')' proposicion
	;

proposicion_de_iteracion
	: WHILE '(' expresion ')' proposicion
	| DO proposicion WHILE '(' expresion ')' ';'
	| FOR '(' proposicion_expresion proposicion_expresion ')' proposicion
	| FOR '(' proposicion_expresion proposicion_expresion expresion ')' proposicion
	;

proposicion_de_salto
	: GOTO IDENTIFIER ';'
	| CONTINUE ';'
	| BREAK ';'
	| RETURN ';'
	| RETURN expresion ';'
	;

unidad_de_traduccion
	: declaracion_externa
	| unidad_de_traduccion declaracion_externa
	;

declaracion_externa
	: definicion_de_funcion
	| declaracion
	;

definicion_de_funcion
	: especificadores_de_declaracion declarator lista_de_declaraciones proposicion_compuesta
	| especificadores_de_declaracion declarator proposicion_compuesta
	| declarator lista_de_declaraciones proposicion_compuesta
	| declarator proposicion_compuesta
	;